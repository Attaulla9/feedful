{
  "title": "Build a RSS reader using Next.js and Airtable",
  "url": "https://flaviocopes.com/nextjs-blog-rss-reader/",
  "date": "Tue, 15 Mar 2022 07:00:00 +0200",
  "content": "        <p>In this project I’m going to create a Web Application using Next.js.</p><p>To goal is to build an app where people can view the latest posts from a list of blogs we selected.</p><p>Think of this like &ldquo;I select a list of sources and I create a website to automatically aggregate the latests content from them&rdquo;</p><p>This is the end result we’ll get to:</p><p><img src=\"Screenshot%202020-04-12%20at%2015.13.07.png\" alt=\"\" /></p><p>People can click the &ldquo;Add a new blog&rdquo; link and submit a new blog to us, the admins, though a form:</p><p><img src=\"Screenshot%202020-04-12%20at%2015.13.09.png\" alt=\"\" /></p><p>We&rsquo;ll store the data using Airtable as our backend of choice, and we&rsquo;ll use it to approve the blogs proposed by our users.</p><p>The list of blog posts will be fetched from the blog posts RSS/Atom feeds.</p><p>And here comes into play one feature of Next.js that will be at the core of our app: the home page and the form pages will be static pages, generated at build time, but at the same time our API will be handled by the server-side code.</p><p>We must generate the home page at build time, in particular, because otherwise we&rsquo;d quickly hit the Airtable API limits, and also it would take a lot of time to keep parsing the RSS feeds, and we&rsquo;d be causing a waste of resources.</p><p>After the app is deployed on Now we&rsquo;ll be able to set up a deploy hook to rebuild the application every hour, for example.</p><h2 id=\"start-with-create-next-app\">Start with create-next-app</h2><p>Go into the folder you use for your projects, and run <code>npx create-next-app</code>.</p><p>You&rsquo;ll be asked a name, you can use <code>project-next-blogposts</code></p><p><img src=\"Screenshot%202020-04-12%20at%2016.03.36.png\" alt=\"\" /></p><p>Wait until the app is ready:</p><p><img src=\"Screenshot%202020-04-12%20at%2016.04.37.png\" alt=\"\" /></p><p>Now run</p><pre tabindex=\"0\"><code>cd project-next-blogposts</code></pre><p>then run</p><pre tabindex=\"0\"><code>npm run dev</code></pre><p>to start the development environment. This will make the sample application ready on port 3000:</p><p><img src=\"Screenshot%202020-04-12%20at%2016.05.51.png\" alt=\"\" /></p><p><img src=\"Screenshot%202020-04-12%20at%2016.06.06.png\" alt=\"\" /></p><h2 id=\"the-homepage\">The homepage</h2><p>The sample Next.js app that&rsquo;s been created by <code>create-next-app</code> contains one page: <code>pages/index.js</code>.</p><p>Open this file, remove everything that&rsquo;s returned by the component, and get it to a bare bones state:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Head</span> <span >from</span> <span >&#39;next/head&#39;</span><span >const</span> <span >Home</span> <span >=</span> () =&gt; (  <span >&lt;</span><span >div</span><span >&gt;&lt;</span><span >/div&gt;</span>)<span >export</span> <span >default</span> <span >Home</span></code></pre></div><p>I&rsquo;m now going to add some HTML I&rsquo;ve taken from the Tailwind UI repository of UI components, so we have a good structure to start from:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Head</span> <span >from</span> <span >&#39;next/head&#39;</span><span >const</span> <span >Home</span> <span >=</span> () =&gt; (  <span >&lt;</span><span >div</span><span >&gt;</span>    <span >&lt;</span><span >Head</span><span >&gt;</span>      <span >&lt;</span><span >title</span><span >&gt;</span><span >Latest</span> <span >posts</span><span >&lt;</span><span >/title&gt;</span>      <span >&lt;</span><span >link</span> <span >rel</span><span >=</span><span >&#39;icon&#39;</span> <span >href</span><span >=</span><span >&#39;/favicon.ico&#39;</span> <span >/&gt;</span>      <span >&lt;</span><span >link</span>        <span >rel</span><span >=</span><span >&#39;stylesheet&#39;</span>        <span >href</span><span >=</span><span >&#39;https://cdn.jsdelivr.net/npm/@tailwindcss/ui@latest/dist/tailwind-ui.min.css&#39;</span>      <span >/&gt;</span>    <span >&lt;</span><span >/Head&gt;</span>    <span >&lt;</span><span >div</span><span >&gt;</span>      <span >&lt;</span><span >header</span> <span >className</span><span >=</span><span >&#39;bg-white shadow&#39;</span><span >&gt;</span>        <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8&#39;</span><span >&gt;</span>          <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;flex justify-between&#39;</span><span >&gt;</span>            <span >&lt;</span><span >h1</span> <span >className</span><span >=</span><span >&#39;text-3xl font-bold leading-tight text-gray-900&#39;</span><span >&gt;</span>              <span >Latest</span> <span >posts</span>            <span >&lt;</span><span >/h1&gt;</span>          <span >&lt;</span><span >/div&gt;</span>        <span >&lt;</span><span >/div&gt;</span>      <span >&lt;</span><span >/header&gt;</span>      <span >&lt;</span><span >main</span><span >&gt;</span>        <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;max-w-7xl mx-auto py-6 sm:px-6 lg:px-8&#39;</span><span >&gt;</span>          <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;px-4 py-4 sm:px-0&#39;</span><span >&gt;</span>            <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;border-4 rounded-lg&#39;</span><span >&gt;</span>              <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;flex flex-col&#39;</span><span >&gt;</span>                <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;-my-2 py-2 overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8&#39;</span><span >&gt;</span>                  <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;align-middle inline-block min-w-full shadow overflow-hidden sm:rounded-lg&#39;</span><span >&gt;</span>                    <span >&lt;</span><span >table</span> <span >className</span><span >=</span><span >&#39;min-w-full&#39;</span><span >&gt;</span>                      <span >&lt;</span><span >thead</span><span >&gt;</span>                        <span >&lt;</span><span >tr</span><span >&gt;</span>                          <span >&lt;</span><span >th</span> <span >className</span><span >=</span><span >&#39;px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider&#39;</span><span >&gt;</span>                            <span >Post</span>                          <span >&lt;</span><span >/th&gt;</span>                          <span >&lt;</span><span >th</span> <span >className</span><span >=</span><span >&#39;px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider&#39;</span><span >&gt;</span>                            Date                          <span >&lt;</span><span >/th&gt;</span>                        <span >&lt;</span><span >/tr&gt;</span>                      <span >&lt;</span><span >/thead&gt;</span>                      <span >&lt;</span><span >tbody</span> <span >className</span><span >=</span><span >&#39;bg-white&#39;</span><span >&gt;</span>                      <span >&lt;</span><span >/tbody&gt;</span>                    <span >&lt;</span><span >/table&gt;</span>                  <span >&lt;</span><span >/div&gt;</span>                <span >&lt;</span><span >/div&gt;</span>              <span >&lt;</span><span >/div&gt;</span>            <span >&lt;</span><span >/div&gt;</span>          <span >&lt;</span><span >/div&gt;</span>        <span >&lt;</span><span >/div&gt;</span>      <span >&lt;</span><span >/main&gt;</span>    <span >&lt;</span><span >/div&gt;</span>  <span >&lt;</span><span >/div&gt;</span>)<span >export</span> <span >default</span> <span >Home</span></code></pre></div><p>I included the <code>Head</code> component from <code>next/head</code>, so we can add the Tailwind UI CSS file, and added some static HTML.</p><p>Here&rsquo;s the result:</p><p><img src=\"Screenshot%202020-04-12%20at%2016.19.34.png\" alt=\"\" /></p><h2 id=\"fetch-data-from-the-rss-feed\">Fetch data from the RSS feed</h2><p>Now we need to feed the component some data.</p><p>To start with, I&rsquo;m going to use my own blog RSS feed, available at <a href=\"https://flaviocopes.com/index.xml\">https://flaviocopes.com/index.xml</a>.</p><p>Install the <a href=\"https://www.npmjs.com/package/rss-parser\">rss-parser npm library</a>:</p><pre tabindex=\"0\"><code>npm install rss-parser</code></pre><p>and at the top of <code>index.js</code> add</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Parser</span> <span >from</span> <span >&#39;rss-parser&#39;</span></code></pre></div><p>Now create a new exported <code>getStaticProps</code> function from the component:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >async</span> <span >function</span> <span >getStaticProps</span>(<span >context</span>) {}</code></pre></div><p>We use this function to export an object that contains a <code>props</code> property. This will be feeded to the component:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >//...</span><span ></span><span >const</span> <span >Home</span> <span >=</span> (<span >props</span>) =&gt; ()<span >export</span> <span >async</span> <span >function</span> <span >getStaticProps</span>(<span >context</span>) {  <span >return</span> {    <span >props</span><span >:</span> {      <span >//...</span><span ></span>    }  }}<span >export</span> <span >default</span> <span >Home</span></code></pre></div><p>In particular, we&rsquo;ll be exporting a <code>posts</code> array that contains the lists of posts we want to display.</p><p>We use the parser library we installed to get the posts from <code>https://flaviocopes.com/index.xml</code>, like this:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >async</span> <span >function</span> <span >getStaticProps</span>(<span >context</span>) {  <span >const</span> <span >parser</span> <span >=</span> <span >new</span> <span >Parser</span>()    <span >const</span> <span >data</span> <span >=</span> <span >await</span> <span >parser</span>.<span >parseURL</span>(<span >&#39;https://flaviocopes.com/index.xml&#39;</span>)  <span >const</span> <span >posts</span> <span >=</span> []  <span >data</span>.<span >items</span>.<span >slice</span>(<span >0</span>, <span >10</span>).<span >forEach</span>((<span >item</span>) =&gt; {    <span >posts</span>.<span >push</span>({      <span >title</span><span >:</span> <span >item</span>.<span >title</span>,      <span >link</span><span >:</span> <span >item</span>.<span >link</span>,      <span >date</span><span >:</span> <span >item</span>.<span >isoDate</span>,      <span >name</span><span >:</span> <span >&#39;Flavio Copes&#39;</span>    })  })  <span >return</span> {    <span >props</span><span >:</span> {      <span >posts</span>    }  }}</code></pre></div><p>Now in the component JSX we iterate through the posts, in the table body, and we print their data:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >tbody</span> <span >className</span><span >=</span><span >&#39;bg-white&#39;</span>&gt;  {<span >props</span>.<span >posts</span>    .<span >sort</span>((<span >a</span>, <span >b</span>) =&gt; <span >new</span> Date(<span >b</span>.<span >date</span>) <span >-</span> <span >new</span> Date(<span >a</span>.<span >date</span>))  .<span >map</span>((<span >value</span>, <span >index</span>) =&gt; {    <span >return</span> (      &lt;<span >tr</span> <span >key</span><span >=</span>{<span >index</span>}&gt;        &lt;<span >td</span> <span >className</span><span >=</span><span >&#39;px-6 py-4 whitespace-no-wrap border-b border-gray-200&#39;</span>&gt;          &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;flex items-center&#39;</span>&gt;            &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;ml-4&#39;</span>&gt;              &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;text-sm leading-5 font-medium text-gray-900 underline&#39;</span>&gt;                &lt;<span >a</span> <span >href</span><span >=</span>{<span >value</span>.<span >link</span>}&gt;{<span >value</span>.<span >title</span>}&lt;/<span >a</span>&gt;              &lt;/<span >div</span>&gt;              &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;text-sm leading-5 text-gray-500&#39;</span>&gt;                {<span >value</span>.<span >name</span>}              &lt;/<span >div</span>&gt;            &lt;/<span >div</span>&gt;          &lt;/<span >div</span>&gt;        &lt;/<span >td</span>&gt;        &lt;<span >td</span> <span >className</span><span >=</span><span >&#39;px-6 py-4 whitespace-no-wrap border-b border-gray-200&#39;</span>&gt;          &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;text-sm leading-5 text-gray-900&#39;</span>&gt;            {<span >new</span> Date(<span >value</span>.<span >date</span>).<span >toDateString</span>()}          &lt;/<span >div</span>&gt;          &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;text-sm leading-5 text-gray-500&#39;</span>&gt;&lt;/<span >div</span>&gt;        &lt;/<span >td</span>&gt;      &lt;/<span >tr</span>&gt;    )  })}&lt;/<span >tbody</span>&gt;</code></pre></div><p>Notice how I use the <code>sort()</code> function to order the posts by date. The feed should already return posts in the order we want, but this will be more useful as we&rsquo;ll get data from multiple feeds later on.</p><p>Here is the result so far:</p><p><img src=\"Screenshot%202020-04-12%20at%2016.27.18.png\" alt=\"\" /></p><p>Thanks to Tailwind, this is automatically nicely formatted just by adding classes to the JSX.</p><p>This is a great starting point for the rest of our application.</p><p>We now need to get multiple feeds, so we can get data from multiple sources.</p><p>To do so, we&rsquo;re going to use Airtable.</p><h2 id=\"create-the-airtable-database\">Create the Airtable database</h2><p><a href=\"https://airtable.com/\">Airtable</a> is one of my favorite go-to solutions as a quick database for prototypes and small apps.</p><p>The reason I like it is that we don&rsquo;t have to setup anything, and it has a nice API.</p><p>Create a new table, and add 6 fields:</p><ul><li><code>name</code></li><li><code>email</code></li><li><code>blogurl</code></li><li><code>feedurl</code></li><li><code>notes</code></li><li><code>approved</code></li></ul><p><img src=\"Screenshot%202020-04-12%20at%2016.34.27.png\" alt=\"\" /></p><p>All text fields, except approved which is a checkbox.</p><p>We&rsquo;ll be able to manually approve blogs from the Airtable interface, simply by clicking the column.</p><p>We&rsquo;re going to fill the Airtable table by letting our users submit new blogs, which will be added through a form.</p><p>Let&rsquo;s build the form!</p><h2 id=\"create-the-form\">Create the form</h2><p>Create a new page in Next.js, in <code>pages/form.js</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >default</span> <span >function</span> () {  <span >return</span> (    <span >&lt;</span><span >div</span><span >&gt;</span>    <span >&lt;</span><span >/div&gt;</span>  )}</code></pre></div><p>Try and visit <code>http://localhost:3000/form</code>, you&rsquo;ll see an empty page.</p><p>Like we did before, let&rsquo;s add some JSX to generate the  HTML structure of the page:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Head</span> <span >from</span> <span >&#39;next/head&#39;</span><span >export</span> <span >default</span> <span >function</span> () {  <span >return</span> (    <span >&lt;</span><span >div</span><span >&gt;</span>      <span >&lt;</span><span >Head</span><span >&gt;</span>        <span >&lt;</span><span >title</span><span >&gt;</span><span >Add</span> <span >new</span> <span >blog</span><span >&lt;</span><span >/title&gt;</span>        <span >&lt;</span><span >link</span> <span >rel</span><span >=</span><span >&#39;icon&#39;</span> <span >href</span><span >=</span><span >&#39;/favicon.ico&#39;</span> <span >/&gt;</span>        <span >&lt;</span><span >link</span>          <span >rel</span><span >=</span><span >&#39;stylesheet&#39;</span>          <span >href</span><span >=</span><span >&#39;https://cdn.jsdelivr.net/npm/@tailwindcss/ui@latest/dist/tailwind-ui.min.css&#39;</span>        <span >/&gt;</span>      <span >&lt;</span><span >/Head&gt;</span>      <span >&lt;</span><span >div</span><span >&gt;</span>        <span >&lt;</span><span >header</span> <span >className</span><span >=</span><span >&#39;bg-white shadow&#39;</span><span >&gt;</span>          <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8&#39;</span><span >&gt;</span>            <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;flex justify-between&#39;</span><span >&gt;</span>              <span >&lt;</span><span >h1</span> <span >className</span><span >=</span><span >&#39;text-3xl font-bold leading-tight text-gray-900&#39;</span><span >&gt;</span>                <span >Add</span> <span >new</span> <span >blog</span>              <span >&lt;</span><span >/h1&gt;</span>            <span >&lt;</span><span >/div&gt;</span>          <span >&lt;</span><span >/div&gt;</span>        <span >&lt;</span><span >/header&gt;</span>        <span >&lt;</span><span >main</span><span >&gt;</span>          <span >&lt;</span><span >p</span> <span >className</span><span >=</span><span >&#39;text-center pb-5&#39;</span><span >&gt;&lt;</span><span >/p&gt;</span>          <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;max-w-7xl mx-auto sm:px-6 lg:px-8&#39;</span><span >&gt;</span>            <span >&lt;</span><span >div</span><span >&gt;</span>              <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;max-w-3xl mx-auto sm:px-6 lg:px-8&#39;</span><span >&gt;</span>                <span >&lt;</span><span >form</span>                  <span >className</span><span >=</span><span >&#39;mt-5 md:mt-0 md:col-span-2&#39;</span>                  <span >action</span><span >=</span><span >&#39;&#39;</span>                  <span >method</span><span >=</span><span >&#39;POST&#39;</span>                <span >&gt;</span>                  <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;shadow sm:rounded-md sm:overflow-hidden&#39;</span><span >&gt;</span>                    <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;px-4 py-5 bg-white sm:p-6&#39;</span><span >&gt;</span>                      <span >&lt;</span><span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span><span >&gt;</span>                        <span >Blog</span> <span >name</span> <span >/</span> <span >owner</span> <span >name</span>                      <span >&lt;</span><span >/label&gt;</span>                      <span >&lt;</span><span >input</span>                        <span >required</span>                        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>                      <span >/&gt;</span>                      <span >&lt;</span><span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span><span >&gt;</span>                        <span >Email</span> <span >address</span>                      <span >&lt;</span><span >/label&gt;</span>                      <span >&lt;</span><span >input</span>                        <span >required</span>                        <span >type</span><span >=</span><span >&#39;email&#39;</span>                        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>                      <span >/&gt;</span>                      <span >&lt;</span><span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span><span >&gt;</span>                        <span >Blog</span> <span >URL</span>                      <span >&lt;</span><span >/label&gt;</span>                      <span >&lt;</span><span >input</span>                        <span >type</span><span >=</span><span >&#39;url&#39;</span>                        <span >required</span>                        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>                        <span >placeholder</span><span >=</span><span >&#39;https://www.example.com&#39;</span>                      <span >/&gt;</span>                      <span >&lt;</span><span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span><span >&gt;</span>                        <span >RSS</span> <span >Feed</span> <span >URL</span>                      <span >&lt;</span><span >/label&gt;</span>                      <span >&lt;</span><span >input</span>                        <span >type</span><span >=</span><span >&#39;url&#39;</span>                        <span >required</span>                        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>                        <span >placeholder</span><span >=</span><span >&#39;https://www.example.com/feed&#39;</span>                      <span >/&gt;</span>                      <span >&lt;</span><span >label</span>                        <span >htmlFor</span><span >=</span><span >&#39;about&#39;</span>                        <span >className</span><span >=</span><span >&#39;block text-sm leading-5 font-medium text-gray-700&#39;</span>                      <span >&gt;</span>                        <span >Notes</span>                      <span >&lt;</span><span >/label&gt;</span>                      <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;rounded-md shadow-sm&#39;</span><span >&gt;</span>                        <span >&lt;</span><span >textarea</span>                          <span >rows</span><span >=</span><span >&#39;3&#39;</span>                          <span >className</span><span >=</span><span >&#39;form-textarea mt-1 block w-full transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>                          <span >placeholder</span><span >=</span><span >&#39;Anything you want to tell us!&#39;</span>                        <span >&gt;&lt;</span><span >/textarea&gt;</span>                      <span >&lt;</span><span >/div&gt;</span>                      <span >&lt;</span><span >p</span> <span >className</span><span >=</span><span >&#39;mt-2 text-sm text-gray-500&#39;</span><span >&gt;</span>                        <span >Your</span> <span >submission</span> <span >will</span> <span >be</span> <span >approved</span> <span >before</span> <span >appearing</span> <span >on</span> <span >the</span>                        <span >site</span>                      <span >&lt;</span><span >/p&gt;</span>                    <span >&lt;</span><span >/div&gt;</span>                    <span >&lt;</span><span >div</span> <span >className</span><span >=</span><span >&#39;px-4 py-3 bg-gray-50 text-right sm:px-6&#39;</span><span >&gt;</span>                      <span >&lt;</span><span >span</span> <span >className</span><span >=</span><span >&#39;inline-flex rounded-md shadow-sm&#39;</span><span >&gt;</span>                        <span >&lt;</span><span >button</span>                          <span >type</span><span >=</span><span >&#39;submit&#39;</span>                          <span >className</span><span >=</span><span >&#39;inline-flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-500 focus:outline-none focus:border-blue-700 focus:shadow-outline-blue active:bg-blue-700 transition duration-150 ease-in-out&#39;</span>                        <span >&gt;</span>                          <span >Save</span>                        <span >&lt;</span><span >/button&gt;</span>                      <span >&lt;</span><span >/span&gt;</span>                    <span >&lt;</span><span >/div&gt;</span>                  <span >&lt;</span><span >/div&gt;</span>                <span >&lt;</span><span >/form&gt;</span>              <span >&lt;</span><span >/div&gt;</span>            <span >&lt;</span><span >/div&gt;</span>          <span >&lt;</span><span >/div&gt;</span>        <span >&lt;</span><span >/main&gt;</span>      <span >&lt;</span><span >/div&gt;</span>    <span >&lt;</span><span >/div&gt;</span>  )}</code></pre></div><p>I included the <code>Head</code> component from <code>next/head</code>, so we can add the Tailwind UI CSS file, and added some static HTML.</p><p>Here&rsquo;s the result so far:</p><p><img src=\"Screenshot%202020-04-12%20at%2016.48.11.png\" alt=\"\" /></p><p>One thing we need to do now is to link the 2 pages, the posts list and the form.</p><p>In both pages, add</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> <span >Link</span> <span >from</span> <span >&#39;next/link&#39;</span></code></pre></div><p>at the top, then in <code>index.js</code> right after the <code>h1</code> tag add:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >p</span>&gt;  &lt;<span >Link</span> <span >href</span><span >=</span><span >&#39;/form&#39;</span>&gt;    &lt;<span >p</span> <span >className</span><span >=</span><span >&#39;underline cursor-pointer mt-2&#39;</span>&gt;      &lt;<span >a</span>&gt;<span >Add</span> <span >a</span> <span >new</span> <span >blog</span>&lt;/<span >a</span>&gt;    &lt;/<span >p</span>&gt;  &lt;/<span >Link</span>&gt;&lt;/<span >p</span>&gt;</code></pre></div><p>in <code>form.js</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >p</span>&gt;  &lt;<span >Link</span> <span >href</span><span >=</span><span >&#39;/&#39;</span>&gt;    &lt;<span >p</span> <span >className</span><span >=</span><span >&#39;underline cursor-pointer mt-2&#39;</span>&gt;      &lt;<span >a</span>&gt;<span >Back</span>&lt;/<span >a</span>&gt;    &lt;/<span >p</span>&gt;  &lt;/<span >Link</span>&gt;&lt;/<span >p</span>&gt;</code></pre></div><h2 id=\"the-form-submit\">The form submit</h2><p>Now let&rsquo;s handle the form submit process.</p><p>We import <code>useState</code> from <code>react</code></p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >import</span> { <span >useState</span> } <span >from</span> <span >&#39;react&#39;</span></code></pre></div><p>Then we can define local state hooks for each form element:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> [<span >name</span>, <span >setName</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)<span >const</span> [<span >email</span>, <span >setEmail</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)<span >const</span> [<span >blogurl</span>, <span >setBlogurl</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)<span >const</span> [<span >feedurl</span>, <span >setFeedurl</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)<span >const</span> [<span >notes</span>, <span >setNotes</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)</code></pre></div><p>Now I use them for each input element, adding the value as the <code>value</code> attribute, and the update function in the <code>onChange</code> handler function, like this:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >value</span><span >=</span>{<span >name</span>}<span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setName</span>(<span >event</span>.<span >target</span>.<span >value</span>)}</code></pre></div><p>Full code:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >form</span>  <span >className</span><span >=</span><span >&#39;mt-5 md:mt-0 md:col-span-2&#39;</span>  <span >action</span><span >=</span><span >&#39;&#39;</span>  <span >method</span><span >=</span><span >&#39;POST&#39;</span>&gt;  &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;shadow sm:rounded-md sm:overflow-hidden&#39;</span>&gt;    &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;px-4 py-5 bg-white sm:p-6&#39;</span>&gt;      &lt;<span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span>&gt;        <span >Blog</span> <span >name</span> <span >/</span> <span >owner</span> <span >name</span>      &lt;/<span >label</span>&gt;      &lt;<span >input</span>        <span >required</span>        <span >value</span><span >=</span>{<span >name</span>}        <span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setName</span>(<span >event</span>.<span >target</span>.<span >value</span>)}        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>      /&gt;      &lt;<span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span>&gt;        <span >Email</span> <span >address</span>      &lt;/<span >label</span>&gt;      &lt;<span >input</span>        <span >required</span>        <span >type</span><span >=</span><span >&#39;email&#39;</span>        <span >value</span><span >=</span>{<span >email</span>}        <span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setEmail</span>(<span >event</span>.<span >target</span>.<span >value</span>)}        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>      /&gt;      &lt;<span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span>&gt;        <span >Blog</span> <span >URL</span>      &lt;/<span >label</span>&gt;      &lt;<span >input</span>        <span >type</span><span >=</span><span >&#39;url&#39;</span>        <span >required</span>        <span >value</span><span >=</span>{<span >blogurl</span>}        <span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setBlogurl</span>(<span >event</span>.<span >target</span>.<span >value</span>)}        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>        <span >placeholder</span><span >=</span><span >&#39;https://www.example.com&#39;</span>      /&gt;      &lt;<span >label</span> <span >className</span><span >=</span><span >&#39;block text-sm font-medium leading-5 text-gray-700&#39;</span>&gt;        <span >RSS</span> <span >Feed</span> <span >URL</span>      &lt;/<span >label</span>&gt;      &lt;<span >input</span>        <span >type</span><span >=</span><span >&#39;url&#39;</span>        <span >required</span>        <span >value</span><span >=</span>{<span >feedurl</span>}        <span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setFeedurl</span>(<span >event</span>.<span >target</span>.<span >value</span>)}        <span >className</span><span >=</span><span >&#39;mb-5 mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>        <span >placeholder</span><span >=</span><span >&#39;https://www.example.com/feed&#39;</span>      /&gt;      &lt;<span >label</span>        <span >htmlFor</span><span >=</span><span >&#39;about&#39;</span>        <span >className</span><span >=</span><span >&#39;block text-sm leading-5 font-medium text-gray-700&#39;</span>      &gt;        <span >Notes</span>      &lt;/<span >label</span>&gt;      &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;rounded-md shadow-sm&#39;</span>&gt;        &lt;<span >textarea</span>          <span >value</span><span >=</span>{<span >notes</span>}          <span >onChange</span><span >=</span>{(<span >event</span>) =&gt; <span >setNotes</span>(<span >event</span>.<span >target</span>.<span >value</span>)}          <span >rows</span><span >=</span><span >&#39;3&#39;</span>          <span >className</span><span >=</span><span >&#39;form-textarea mt-1 block w-full transition duration-150 ease-in-out sm:text-sm sm:leading-5&#39;</span>          <span >placeholder</span><span >=</span><span >&#39;Anything you want to tell us!&#39;</span>        &gt;&lt;/<span >textarea</span>&gt;      &lt;/<span >div</span>&gt;      &lt;<span >p</span> <span >className</span><span >=</span><span >&#39;mt-2 text-sm text-gray-500&#39;</span>&gt;        <span >Your</span> <span >submission</span> <span >will</span> <span >be</span> <span >approved</span> <span >before</span> <span >appearing</span> <span >on</span> <span >the</span>        <span >site</span>      &lt;/<span >p</span>&gt;    &lt;/<span >div</span>&gt;    &lt;<span >div</span> <span >className</span><span >=</span><span >&#39;px-4 py-3 bg-gray-50 text-right sm:px-6&#39;</span>&gt;      &lt;<span >span</span> <span >className</span><span >=</span><span >&#39;inline-flex rounded-md shadow-sm&#39;</span>&gt;        &lt;<span >button</span>          <span >type</span><span >=</span><span >&#39;submit&#39;</span>          <span >className</span><span >=</span><span >&#39;inline-flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-500 focus:outline-none focus:border-blue-700 focus:shadow-outline-blue active:bg-blue-700 transition duration-150 ease-in-out&#39;</span>        &gt;          <span >Save</span>        &lt;/<span >button</span>&gt;      &lt;/<span >span</span>&gt;    &lt;/<span >div</span>&gt;  &lt;/<span >div</span>&gt;&lt;/<span >form</span>&gt;</code></pre></div><h2 id=\"handle-the-form-submit\">Handle the form submit</h2><p>Now I add an <code>onSubmit</code> event handler to the form, which is assigned a function called <code>handleSubmit</code>:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >form</span>  <span >className</span><span >=</span><span >&#39;mt-5 md:mt-0 md:col-span-2&#39;</span>  <span >action</span><span >=</span><span >&#39;&#39;</span>  <span >method</span><span >=</span><span >&#39;POST&#39;</span>  <span >onSubmit</span><span >=</span>{<span >handleSubmit</span>}&gt;</code></pre></div><p>here&rsquo;s the function:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >handleSubmit</span> <span >=</span> <span >async</span> (<span >event</span>) =&gt; {  <span >event</span>.<span >preventDefault</span>()  <span >//...</span><span ></span>}</code></pre></div><p>Inside the function, we&rsquo;re going to hit an API we&rsquo;re soon going to define, that will answer to a POST request on the <code>/api/blog</code> URL:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >handleSubmit</span> <span >=</span> <span >async</span> (<span >event</span>) =&gt; {  <span >event</span>.<span >preventDefault</span>()  <span >try</span> {    <span >const</span> <span >res</span> <span >=</span> <span >await</span> <span >fetch</span>(<span >&#39;/api/blog&#39;</span>, {      <span >method</span><span >:</span> <span >&#39;POST&#39;</span>,      <span >body</span><span >:</span> <span >JSON</span>.<span >stringify</span>({ <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> }),      <span >headers</span><span >:</span> { <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span> },    })    <span >const</span> <span >json</span> <span >=</span> <span >await</span> <span >res</span>.<span >json</span>()}</code></pre></div><p>While I&rsquo;m here I&rsquo;m also adding a bit of error checking and positive / negative feedback handling from the API. If the API contains a <code>success</code> property, we&rsquo;re going to fire an <code>alert()</code> and redirect back to the homepage.</p><p>Add <code>import Router from 'next/router'</code> to use <code>Router.push('/')</code></p><p>We&rsquo;re going to use a <code>response</code> local state through hooks.</p><p>Define</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> [<span >response</span>, <span >setResponse</span>] <span >=</span> <span >useState</span>(<span >&#39;&#39;</span>)</code></pre></div><p>and we&rsquo;ll update it when the response is back:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >handleSubmit</span> <span >=</span> <span >async</span> (<span >event</span>) =&gt; {  <span >event</span>.<span >preventDefault</span>()  <span >try</span> {    <span >const</span> <span >res</span> <span >=</span> <span >await</span> <span >fetch</span>(<span >&#39;/api/blog&#39;</span>, {      <span >method</span><span >:</span> <span >&#39;POST&#39;</span>,      <span >body</span><span >:</span> <span >JSON</span>.<span >stringify</span>({ <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> }),      <span >headers</span><span >:</span> { <span >&#39;Content-Type&#39;</span><span >:</span> <span >&#39;application/json&#39;</span> },    })    <span >const</span> <span >json</span> <span >=</span> <span >await</span> <span >res</span>.<span >json</span>()    <span >if</span> (<span >json</span>.<span >success</span>) {      <span >alert</span>(<span >&#39;Thank you for submitting your blog!&#39;</span>)      <span >Router</span>.<span >push</span>(<span >&#39;/&#39;</span>)    } <span >else</span> {      <span >setResponse</span>(<span >json</span>.<span >message</span>)    }  } <span >catch</span> (<span >error</span>) {    <span >setResponse</span>(<span >&#39;An error occured while submitting the form&#39;</span>)  }}</code></pre></div><p>Now in the JSX, I&rsquo;m printing the response in the empty element we have right after the opening <code>main</code> tag:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >p</span> <span >className</span><span >=</span><span >&#39;text-center pb-5&#39;</span>&gt;&lt;/<span >p</span>&gt;</code></pre></div><p>Like this:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-jsx\" data-lang=\"jsx\">&lt;<span >p</span> <span >className</span><span >=</span><span >&#39;text-center pb-5&#39;</span>&gt;{<span >response</span>}&lt;/<span >p</span>&gt;</code></pre></div><h2 id=\"the-post-api-blog-api-endpoint\">The POST /api/blog API endpoint</h2><p>Let&rsquo;s now create the API endpoint.</p><p>Create a file <code>pages/api/blog.js</code>, and add a default export that accepts a req and res objects:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >default</span> (<span >req</span>, <span >res</span>) =&gt; { }</code></pre></div><p>Those are the familiar objects that you get in any Node.js server app. We&rsquo;re going to first disable any request that&rsquo;s not a POST request:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >default</span> (<span >req</span>, <span >res</span>) =&gt; {  <span >if</span> (<span >!</span><span >req</span>.<span >method</span> <span >===</span> <span >&#39;POST&#39;</span>) {    <span >res</span>.<span >status</span>(<span >405</span>).<span >end</span>() <span >//Method Not Allowed</span><span ></span>    <span >return</span>  }}</code></pre></div><p>Then we extract the values we need from the request body:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\">  <span >const</span> { <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> } <span >=</span> <span >req</span>.<span >body</span></code></pre></div><p>and we send them using the Airtable API.</p><p>On Airtable, in the base you just created, you can see the HELP menu. Click that, and then select <strong>API documentation</strong>:</p><p><img src=\"Screenshot%202020-04-12%20at%2017.16.10.png\" alt=\"\" /></p><p>This will give you ready-to-use examples to interact with the table.</p><p>The nice thing is that they automatically include the API key and the base ID you need to use.</p><p>We&rsquo;re going to use this code:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >Airtable</span> <span >=</span> <span >require</span>(<span >&#39;airtable&#39;</span>)<span >const</span> <span >base</span> <span >=</span> <span >new</span> <span >Airtable</span>({ <span >apiKey</span><span >:</span> <span >process</span>.<span >env</span>.<span >APIKEY</span> }).<span >base</span>(  <span >&#39;appYOURBASEID&#39;</span>)<span >base</span>(<span >&#39;Table 1&#39;</span>).<span >create</span>(  [{ <span >fields</span><span >:</span> { <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> } }],  (<span >err</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >res</span>.<span >status</span>(<span >500</span>).<span >end</span>()      <span >return</span>    }  })</code></pre></div><p>Make sure you run</p><pre tabindex=\"0\"><code>npm install airtable</code></pre><p>to install the Airtable official library that we require.</p><p>Note that I entered my base <code>id</code> in the code.</p><p>The Airtable API key, however, is listed as <code>process.env.APIKEY</code> because I&rsquo;m going to pass it from the command line, so it&rsquo;s not included in the code.</p><p>Stop the process in the terminal, and run</p><pre tabindex=\"0\"><code>APIKEY=keyYOURAPIKEY npm run dev</code></pre><blockquote><p>You can find your API key in the Airtable API documentation</p></blockquote><p>Finally, we return the response back to the user:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >res</span>.<span >json</span>({  <span >success</span><span >:</span> <span >true</span>})</code></pre></div><p>Here&rsquo;s the full <code>pages/api/blog.js</code> file content:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >default</span> (<span >req</span>, <span >res</span>) =&gt; {  <span >if</span> (<span >!</span><span >req</span>.<span >method</span> <span >===</span> <span >&#39;POST&#39;</span>) {    <span >res</span>.<span >status</span>(<span >405</span>).<span >end</span>() <span >//Method Not Allowed</span><span ></span>    <span >return</span>  }  <span >const</span> { <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> } <span >=</span> <span >req</span>.<span >body</span>  <span >const</span> <span >Airtable</span> <span >=</span> <span >require</span>(<span >&#39;airtable&#39;</span>)  <span >const</span> <span >base</span> <span >=</span> <span >new</span> <span >Airtable</span>({ <span >apiKey</span><span >:</span> <span >process</span>.<span >env</span>.<span >APIKEY</span> }).<span >base</span>(    <span >&#39;appYOURBASEID&#39;</span>  )  <span >base</span>(<span >&#39;Table 1&#39;</span>).<span >create</span>([{ <span >fields</span><span >:</span> { <span >name</span>, <span >email</span>, <span >blogurl</span>, <span >feedurl</span>, <span >notes</span> } }], (<span >err</span>) =&gt; {    <span >if</span> (<span >err</span>) {      <span >console</span>.<span >error</span>(<span >err</span>)      <span >res</span>.<span >status</span>(<span >500</span>).<span >end</span>()      <span >return</span>    }  })  <span >res</span>.<span >json</span>({    <span >success</span><span >:</span> <span >true</span>  })}</code></pre></div><p>Now try filling the form: the data should be saved on Airtable.</p><h2 id=\"fetching-blogs-using-the-airtable-api\">Fetching blogs using the Airtable API</h2><p>Now that we have the database set up, it&rsquo;s time to use the Airtable API in the <code>index.js</code> page, to fetch the list of blogs approved.</p><blockquote><p>Tip: add a few blogs, and approve them manually on Airtable by clicking the checkbox in the <code>approved</code> column.</p><p><img src=\"Screenshot%202020-04-12%20at%2017.23.41.png\" alt=\"\" /></p></blockquote><p>The <code>getStaticProps()</code> function now exports the list of blog posts from my blog, because we hardcoded that address.</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >export</span> <span >async</span> <span >function</span> <span >getStaticProps</span>(<span >context</span>) {  <span >const</span> <span >parser</span> <span >=</span> <span >new</span> <span >Parser</span>()    <span >const</span> <span >data</span> <span >=</span> <span >await</span> <span >parser</span>.<span >parseURL</span>(<span >&#39;https://flaviocopes.com/index.xml&#39;</span>)  <span >const</span> <span >posts</span> <span >=</span> []  <span >data</span>.<span >items</span>.<span >slice</span>(<span >0</span>, <span >10</span>).<span >forEach</span>((<span >item</span>) =&gt; {    <span >posts</span>.<span >push</span>({      <span >title</span><span >:</span> <span >item</span>.<span >title</span>,      <span >link</span><span >:</span> <span >item</span>.<span >link</span>,      <span >date</span><span >:</span> <span >item</span>.<span >isoDate</span>,      <span >name</span><span >:</span> <span >&#39;Flavio Copes&#39;</span>    })  })  <span >return</span> {    <span >props</span><span >:</span> {      <span >posts</span>,    }  }}</code></pre></div><p>We&rsquo;re going to refactor this code, retrieving the list of feed URLs.</p><p>Here&rsquo;s how I retrieve the first 100 results from Airtable:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >Airtable</span> <span >=</span> <span >require</span>(<span >&#39;airtable&#39;</span>)<span >const</span> <span >base</span> <span >=</span> <span >new</span> <span >Airtable</span>({ <span >apiKey</span><span >:</span> <span >process</span>.<span >env</span>.<span >APIKEY</span> }).<span >base</span>(  <span >&#39;appYOURBASEID&#39;</span>)<span >const</span> <span >records</span> <span >=</span> <span >await</span> <span >base</span>(<span >&#39;Table 1&#39;</span>).<span >select</span>({  <span >view</span><span >:</span> <span >&#39;Grid view&#39;</span>,}).<span >firstPage</span>()</code></pre></div><p>We only get the first page of results and we limit to the first 100 blogs listed in Airtable, as that&rsquo;s the maxiumum items we can get for each API call, but I think that to start with this is a good number.</p><p>Airtable will always serve the items from item #1 to item #100, so the new blogs that will be added, even if unapproved, will not affect our results. They will not &ldquo;push down&rdquo; existing and approved blogs.</p><p>Now we can get the data from the records:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >feeds</span> <span >=</span> <span >records</span>.<span >filter</span>((<span >record</span>) =&gt; {  <span >if</span> (<span >record</span>.<span >get</span>(<span >&#39;approved&#39;</span>) <span >===</span> <span >true</span>) <span >return</span> <span >true</span>}).<span >map</span>((<span >record</span>) =&gt; {  <span >return</span> {    <span >id</span><span >:</span> <span >record</span>.<span >id</span>,    <span >name</span><span >:</span> <span >record</span>.<span >get</span>(<span >&#39;name&#39;</span>),    <span >blogurl</span><span >:</span> <span >record</span>.<span >get</span>(<span >&#39;blogurl&#39;</span>),    <span >feedurl</span><span >:</span> <span >record</span>.<span >get</span>(<span >&#39;feedurl&#39;</span>),  }})</code></pre></div><p>and we can process each blog RSS feed in a loop:</p><div class=\"highlight\"><pre tabindex=\"0\" ><code class=\"language-js\" data-lang=\"js\"><span >const</span> <span >posts</span> <span >=</span> []<span >for</span> (<span >const</span> <span >feed</span> <span >of</span> <span >feeds</span>) {  <span >const</span> <span >data</span> <span >=</span> <span >await</span> <span >parser</span>.<span >parseURL</span>(<span >feed</span>.<span >feedurl</span>)  <span >data</span>.<span >items</span>.<span >slice</span>(<span >0</span>, <span >10</span>).<span >forEach</span>((<span >item</span>) =&gt; {    <span >posts</span>.<span >push</span>({      <span >title</span><span >:</span> <span >item</span>.<span >title</span>,      <span >link</span><span >:</span> <span >item</span>.<span >link</span>,      <span >date</span><span >:</span> <span >item</span>.<span >isoDate</span>,      <span >name</span><span >:</span> <span >feed</span>.<span >name</span>,    })  })}</code></pre></div><p>Awesome! This should be the result, a mix of blog posts ordered by date:</p><p><img src=\"Screenshot%202020-04-12%20at%2017.37.15.png\" alt=\"\" /></p>      ",
  "image": "https://flaviocopes.com/img/avatar.png",
  "description": "In this project I’m going to create a Web Application using Next.js.\nTo goal is to build an app where people can view the latest posts from a list of blogs we selected.\nThink of this like “I select a list of sources and I create a website to automatically aggregate the latests content from them”\nThis is the end result we’ll get to:\nPeople can click the “Add a new blog” link and submit a new blog to us, the admins, though a form:",
  "publisher": "Flaviocopes",
  "publisherUrl": "https://flaviocopes.com/"
}